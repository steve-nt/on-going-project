================================================================================
          WHY PersonB-mfa_totp.py AND PersonB-mfa_hotp.py 
              DON'T UPDATE THE DATABASE
================================================================================

UNDERSTANDING THE FILE STRUCTURE:
----------------------------------

The MFA scripts have TWO purposes:

1. **PersonB-mfa_totp.py** and **PersonB-mfa_hotp.py**
   → These are CLASS MODULES / LIBRARIES
   → They define TOTPManager and HOTPManager classes
   → When run standalone: Generate demos and artifacts (QR codes, stats)
   → When imported: Provide MFA functionality to Flask app
   → DO NOT directly modify users.db

2. **PersonB-integrated_app.py**
   → This is the FLASK APPLICATION
   → Imports functionality from mfa_totp and mfa_hotp (if needed)
   → Has ROUTES that accept HTTP requests
   → UPDATES users.db when you make API calls
   → This is the ONLY way to properly add MFA users via API


================================================================================
                    WHAT EACH SCRIPT ACTUALLY DOES
================================================================================

PersonB-mfa_totp.py (When Run Standalone):
-------------------------------------------
GENERATES:
  ✓ qr_testuser_totp.png          - QR code image
  ✓ totp_stats.json               - Verification statistics
  ✓ Console output                - Demo of TOTP functionality

DOES NOT:
  ✗ Connect to users.db
  ✗ Add users to database
  ✗ Update MFA enrollment
  
PURPOSE:
  • Demonstrate TOTP implementation
  • Generate artifacts for deliverables
  • Test TOTP time windows
  • Show verification stats


PersonB-mfa_hotp.py (When Run Standalone):
-------------------------------------------
GENERATES:
  ✓ hotp_stats.json               - HOTP statistics with counter info
  ✓ Console output                - Demo of counter desync

DOES NOT:
  ✗ Connect to users.db
  ✗ Add users to database
  ✗ Update MFA enrollment

PURPOSE:
  • Demonstrate HOTP implementation
  • Show counter desynchronization problem
  • Generate statistics for report
  • Prove HOTP challenges


PersonB-integrated_app.py (Flask Server):
------------------------------------------
WHEN RUNNING:
  ✓ Connects to users.db
  ✓ Creates tables (users, mfa_logs)
  ✓ Provides API endpoints
  ✓ Updates database on API calls

ENDPOINTS:
  POST /register               - Creates user
  POST /mfa/enroll/totp        - Enrolls user with TOTP (updates DB!)
  POST /login                  - Verifies credentials
  POST /mfa/verify             - Verifies OTP token
  GET  /mfa/stats              - Shows MFA statistics

PURPOSE:
  • Production-ready Flask API
  • Database integration
  • MFA enrollment and verification
  • Logging and statistics


================================================================================
                    HOW TO ADD MFA USERS TO DATABASE
================================================================================

METHOD 1: Use the Integrated Flask App (Recommended)
-----------------------------------------------------

Terminal 1 - Start server:
  cd /home/steven/Desktop/on-going-project/v1-D7076E-Lab3
  python3 PersonB-integrated_app.py

Terminal 2 - Make API calls:
  # Register user
  curl -X POST http://localhost:5000/register \
    -H "Content-Type: application/json" \
    -d '{"username":"newuser","password":"pass123","hash_type":"bcrypt"}'
  
  # Enroll TOTP MFA
  curl -X POST http://localhost:5000/mfa/enroll/totp \
    -H "Content-Type: application/json" \
    -d '{"username":"newuser"}'
  
  # This UPDATES users.db!

Terminal 3 - Verify:
  sqlite3 users.db "SELECT username, mfa_enabled, mfa_type FROM users;"


METHOD 2: Use the Helper Script (Quick Population)
---------------------------------------------------
We created a script specifically for this:

  python3 populate_mfa_users.py

This script:
  ✓ Directly updates users.db
  ✓ Adds 3 test users with MFA
  ✓ Generates QR codes
  ✓ Shows TOTP/HOTP secrets
  ✓ Displays database before/after

Users created:
  • totp_user     (TOTP MFA, password: password123)
  • hotp_user     (HOTP MFA, password: password123)
  • alice_mfa     (TOTP MFA, password: secure_pass)


METHOD 3: Manual SQL Insertion (Not Recommended)
-------------------------------------------------
You can manually INSERT into users table, but need to:
  • Generate bcrypt hash with pepper
  • Generate TOTP/HOTP secret
  • Set mfa_enabled=1
  • Set appropriate mfa_type
  
Better to use Method 1 or 2.


================================================================================
                    CURRENT DATABASE STATUS
================================================================================

After running populate_mfa_users.py, your database has:

┌──────────────────┬──────────┬─────────────┬──────────┬─────────────────┐
│ Username         │ Hash     │ MFA Enabled │ MFA Type │ TOTP Secret     │
├──────────────────┼──────────┼─────────────┼──────────┼─────────────────┤
│ testuser_mitm    │ bcrypt   │ 1           │ totp     │ 2ZLLDIBARF...   │
│ totp_user        │ bcrypt   │ 1           │ totp     │ AV4YJXBHFV...   │
│ hotp_user        │ bcrypt   │ 1           │ hotp     │ SMN4ZKAWTZ...   │
│ alice_mfa        │ bcrypt   │ 1           │ totp     │ AZPWUPYAIW...   │
└──────────────────┴──────────┴─────────────┴──────────┴─────────────────┘

QR Codes Generated:
  ✓ qr_testuser_totp.png
  ✓ qr_totp_user_totp.png
  ✓ qr_alice_mfa_totp.png


================================================================================
                    TESTING THE MFA USERS
================================================================================

Test TOTP User:
---------------
1. Start integrated app:
   python3 PersonB-integrated_app.py

2. Generate TOTP token:
   python3 -c "import pyotp; print(pyotp.TOTP('AV4YJXBHFVVS7TH3OGVP7ZT3VY5W2MMZ').now())"

3. Login with MFA:
   curl -X POST http://localhost:5000/login \
     -H "Content-Type: application/json" \
     -d '{"username":"totp_user","password":"password123"}'
   
   # Should return: "mfa_required"

4. Verify TOTP:
   curl -X POST http://localhost:5000/mfa/verify \
     -H "Content-Type: application/json" \
     -d '{"username":"totp_user","token":"TOKEN_FROM_STEP_2"}'
   
   # Should return: "success"


Test HOTP User:
---------------
HOTP requires counter management, more complex.
Use PersonB-mfa_hotp.py demonstration instead.


================================================================================
                    WHY THIS CONFUSION HAPPENED
================================================================================

The confusion occurred because:

1. FILE NAMING suggests they should update database
   → "PersonB-mfa_totp.py" sounds like it should do everything
   → Actually it's just a CLASS MODULE / LIBRARY

2. DUAL PURPOSE of the files
   → Can be run standalone (generates demos)
   → Can be imported (provides classes)
   → Database updates only happen through Flask app

3. SEPARATION OF CONCERNS (Good Design!)
   → MFA logic: PersonB-mfa_totp.py, PersonB-mfa_hotp.py
   → Database logic: PersonB-integrated_app.py
   → This is actually GOOD software architecture


================================================================================
                    WHAT TO USE FOR DELIVERABLES
================================================================================

FOR ARTIFACTS:
--------------
✓ Run PersonB-mfa_totp.py      → Generates qr_*.png, totp_stats.json
✓ Run PersonB-mfa_hotp.py       → Generates hotp_stats.json
✓ Run populate_mfa_users.py     → Populates database with test users

FOR TESTING/DEMO:
-----------------
✓ Use PersonB-integrated_app.py → Full Flask API with MFA
✓ Make API calls via curl        → Simulates real usage
✓ Check database after each call → Verify updates

FOR REPORT:
-----------
✓ Reference qr_*.png            → Show TOTP enrollment
✓ Reference totp_stats.json     → Show verification rates
✓ Reference hotp_stats.json     → Show counter desync issues
✓ Query users.db                → Show database schema with MFA


================================================================================
                    SUMMARY & SOLUTION
================================================================================

PROBLEM:
  PersonB-mfa_totp.py and PersonB-mfa_hotp.py don't update users.db

REASON:
  They are library/demo scripts, not database management scripts

SOLUTION:
  ✓ Use PersonB-integrated_app.py API for proper database updates
  ✓ Use populate_mfa_users.py for quick test data population
  ✓ Use PersonB-mfa_*.py for generating artifacts and demonstrations

RESULT:
  ✓ Database now has 4 users with MFA enabled
  ✓ QR codes generated for TOTP users
  ✓ Statistics files created for analysis
  ✓ Ready for testing and deliverables


FILES NOW IN YOUR DIRECTORY:
-----------------------------
✓ users.db                    - Database with 4 MFA users
✓ qr_testuser_totp.png        - QR code for testuser_mitm
✓ qr_totp_user_totp.png       - QR code for totp_user
✓ qr_alice_mfa_totp.png       - QR code for alice_mfa
✓ totp_stats.json             - TOTP verification statistics
✓ hotp_stats.json             - HOTP verification statistics (if run)
✓ populate_mfa_users.py       - Helper script we created


ALL SYSTEMS READY! ✓
================================================================================
